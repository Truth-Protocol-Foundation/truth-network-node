
//! Autogenerated weights for pallet_config
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-05-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-16-102`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/tnf-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --template
// .maintain/frame-weight-template.hbs
// --pallet
// pallet_config
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallet_config.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_config.
pub trait WeightInfo {
	fn set_admin_account() -> Weight;
	fn set_base_gas_fee() -> Weight;
	fn set_gas_fee_recipient() -> Weight;
}

/// Weights for pallet_config using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `PalletConfig::AdminAccount` (r:1 w:1)
	/// Proof: `PalletConfig::AdminAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_admin_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `72`
		//  Estimated: `1517`
		// Minimum execution time: 10_509_000 picoseconds.
		Weight::from_parts(11_055_000, 1517)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PalletConfig::AdminAccount` (r:1 w:0)
	/// Proof: `PalletConfig::AdminAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `PalletConfig::BaseGasFee` (r:1 w:1)
	/// Proof: `PalletConfig::BaseGasFee` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_base_gas_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `132`
		//  Estimated: `1517`
		// Minimum execution time: 13_148_000 picoseconds.
		Weight::from_parts(14_186_000, 1517)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PalletConfig::AdminAccount` (r:1 w:0)
	/// Proof: `PalletConfig::AdminAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `PalletConfig::GasFeeRecipientAccount` (r:1 w:1)
	/// Proof: `PalletConfig::GasFeeRecipientAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_gas_fee_recipient() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `148`
		//  Estimated: `1517`
		// Minimum execution time: 14_499_000 picoseconds.
		Weight::from_parts(15_444_000, 1517)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `PalletConfig::AdminAccount` (r:1 w:1)
	/// Proof: `PalletConfig::AdminAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_admin_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `72`
		//  Estimated: `1517`
		// Minimum execution time: 10_509_000 picoseconds.
		Weight::from_parts(11_055_000, 1517)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PalletConfig::AdminAccount` (r:1 w:0)
	/// Proof: `PalletConfig::AdminAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `PalletConfig::BaseGasFee` (r:1 w:1)
	/// Proof: `PalletConfig::BaseGasFee` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_base_gas_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `132`
		//  Estimated: `1517`
		// Minimum execution time: 13_148_000 picoseconds.
		Weight::from_parts(14_186_000, 1517)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PalletConfig::AdminAccount` (r:1 w:0)
	/// Proof: `PalletConfig::AdminAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `PalletConfig::GasFeeRecipientAccount` (r:1 w:1)
	/// Proof: `PalletConfig::GasFeeRecipientAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_gas_fee_recipient() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `148`
		//  Estimated: `1517`
		// Minimum execution time: 14_499_000 picoseconds.
		Weight::from_parts(15_444_000, 1517)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
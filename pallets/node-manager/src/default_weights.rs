
//! Autogenerated weights for pallet_node_manager
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-02-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `nahu-Precision-7560`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/tnf-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --template
// .maintain/frame-weight-template.hbs
// --pallet
// pallet_node_manager
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// node-manager_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_node_manager.
pub trait WeightInfo {
	fn register_node() -> Weight;
}
/// Weights for pallet_node_manager using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:1 w:1)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalRegisteredNodes` (r:1 w:1)
	/// Proof: `NodeManager::TotalRegisteredNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::OwnedNodes` (r:0 w:1)
	/// Proof: `NodeManager::OwnedNodes` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn register_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3577`
		// Minimum execution time: 21_027_000 picoseconds.
		Weight::from_parts(25_046_000, 3577)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:1 w:1)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalRegisteredNodes` (r:1 w:1)
	/// Proof: `NodeManager::TotalRegisteredNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::OwnedNodes` (r:0 w:1)
	/// Proof: `NodeManager::OwnedNodes` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn register_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3577`
		// Minimum execution time: 21_027_000 picoseconds.
		Weight::from_parts(25_046_000, 3577)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
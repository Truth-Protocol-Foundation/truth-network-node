
//! Autogenerated weights for pallet_node_manager
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-03-22, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `nahu-Precision-7560`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/tnf-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --template
// .maintain/frame-weight-template.hbs
// --pallet
// pallet_node_manager
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// node-manager_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_node_manager.
pub trait WeightInfo {
	fn register_node() -> Weight;
	fn set_admin_config_registrar() -> Weight;
	fn set_admin_config_reward_period() -> Weight;
	fn set_admin_config_reward_batch_size() -> Weight;
	fn set_admin_config_reward_heartbeat() -> Weight;
	fn set_admin_config_reward_amount() -> Weight;
	fn set_admin_config_reward_enabled() -> Weight;
	fn set_admin_config_min_threshold() -> Weight;
	fn on_initialise_with_new_reward_period() -> Weight;
	fn on_initialise_no_reward_period() -> Weight;
	fn offchain_submit_heartbeat() -> Weight;
	fn offchain_pay_nodes(b: u32, ) -> Weight;
	fn pay_nodes_constant_batch_size(n: u32, ) -> Weight;
	fn signed_register_node() -> Weight;
	fn deregister_nodes(b: u32, ) -> Weight;
	fn signed_deregister_nodes(b: u32, ) -> Weight;
}

/// Weights for pallet_node_manager using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:1 w:1)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalRegisteredNodes` (r:1 w:1)
	/// Proof: `NodeManager::TotalRegisteredNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::OwnedNodes` (r:0 w:1)
	/// Proof: `NodeManager::OwnedNodes` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn register_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `214`
		//  Estimated: `3577`
		// Minimum execution time: 22_785_000 picoseconds.
		Weight::from_parts(24_024_000, 3577)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:1)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_admin_config_registrar() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `211`
		//  Estimated: `1517`
		// Minimum execution time: 12_524_000 picoseconds.
		Weight::from_parts(13_257_000, 1517)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::HeartbeatPeriod` (r:1 w:0)
	/// Proof: `NodeManager::HeartbeatPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:1)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn set_admin_config_reward_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `192`
		//  Estimated: `1505`
		// Minimum execution time: 16_220_000 picoseconds.
		Weight::from_parts(16_974_000, 1505)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::MaxBatchSize` (r:1 w:1)
	/// Proof: `NodeManager::MaxBatchSize` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_admin_config_reward_batch_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `1489`
		// Minimum execution time: 12_975_000 picoseconds.
		Weight::from_parts(13_416_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:0)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::HeartbeatPeriod` (r:1 w:1)
	/// Proof: `NodeManager::HeartbeatPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_admin_config_reward_heartbeat() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `192`
		//  Estimated: `1505`
		// Minimum execution time: 14_659_000 picoseconds.
		Weight::from_parts(16_309_000, 1505)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::RewardAmount` (r:1 w:1)
	/// Proof: `NodeManager::RewardAmount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_admin_config_reward_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `162`
		//  Estimated: `1501`
		// Minimum execution time: 13_051_000 picoseconds.
		Weight::from_parts(14_290_000, 1501)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::RewardEnabled` (r:1 w:1)
	/// Proof: `NodeManager::RewardEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_admin_config_reward_enabled() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `1486`
		// Minimum execution time: 12_508_000 picoseconds.
		Weight::from_parts(13_226_000, 1486)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::MinUptimeThreshold` (r:1 w:1)
	/// Proof: `NodeManager::MinUptimeThreshold` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_admin_config_min_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `1489`
		// Minimum execution time: 11_375_000 picoseconds.
		Weight::from_parts(11_953_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::RewardEnabled` (r:1 w:0)
	/// Proof: `NodeManager::RewardEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:1)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::HeartbeatPeriod` (r:1 w:0)
	/// Proof: `NodeManager::HeartbeatPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::MinUptimeThreshold` (r:1 w:0)
	/// Proof: `NodeManager::MinUptimeThreshold` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardAmount` (r:1 w:0)
	/// Proof: `NodeManager::RewardAmount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalUptime` (r:1 w:0)
	/// Proof: `NodeManager::TotalUptime` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPot` (r:0 w:1)
	/// Proof: `NodeManager::RewardPot` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn on_initialise_with_new_reward_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `215`
		//  Estimated: `3497`
		// Minimum execution time: 23_376_000 picoseconds.
		Weight::from_parts(26_125_000, 3497)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NodeManager::RewardEnabled` (r:1 w:0)
	/// Proof: `NodeManager::RewardEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:0)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn on_initialise_no_reward_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `1505`
		// Minimum execution time: 7_827_000 picoseconds.
		Weight::from_parts(11_273_000, 1505)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `NodeManager::NodeRegistry` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:0)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeUptime` (r:1 w:1)
	/// Proof: `NodeManager::NodeUptime` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::HeartbeatPeriod` (r:1 w:0)
	/// Proof: `NodeManager::HeartbeatPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalUptime` (r:1 w:1)
	/// Proof: `NodeManager::TotalUptime` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn offchain_submit_heartbeat() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `507`
		//  Estimated: `3577`
		// Minimum execution time: 30_170_000 picoseconds.
		Weight::from_parts(36_630_000, 3577)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NodeManager::OldestUnpaidRewardPeriodIndex` (r:1 w:0)
	/// Proof: `NodeManager::OldestUnpaidRewardPeriodIndex` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:0)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalUptime` (r:1 w:0)
	/// Proof: `NodeManager::TotalUptime` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeUptime` (r:1001 w:999)
	/// Proof: `NodeManager::NodeUptime` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPot` (r:1 w:0)
	/// Proof: `NodeManager::RewardPot` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::LastPaidPointer` (r:1 w:1)
	/// Proof: `NodeManager::LastPaidPointer` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::MaxBatchSize` (r:1 w:0)
	/// Proof: `NodeManager::MaxBatchSize` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:999 w:0)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 1000]`.
	fn offchain_pay_nodes(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2334 + b * (184 ±0)`
		//  Estimated: `6196 + b * (2587 ±0)`
		// Minimum execution time: 147_805_000 picoseconds.
		Weight::from_parts(988_169_849, 6196)
			// Standard Error: 232_533
			.saturating_add(Weight::from_parts(46_177_465, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2587).saturating_mul(b.into()))
	}
	/// Storage: `NodeManager::OldestUnpaidRewardPeriodIndex` (r:1 w:0)
	/// Proof: `NodeManager::OldestUnpaidRewardPeriodIndex` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:0)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalUptime` (r:1 w:0)
	/// Proof: `NodeManager::TotalUptime` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeUptime` (r:12 w:10)
	/// Proof: `NodeManager::NodeUptime` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPot` (r:1 w:0)
	/// Proof: `NodeManager::RewardPot` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::LastPaidPointer` (r:1 w:1)
	/// Proof: `NodeManager::LastPaidPointer` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::MaxBatchSize` (r:1 w:0)
	/// Proof: `NodeManager::MaxBatchSize` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:10 w:0)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 100]`.
	fn pay_nodes_constant_batch_size(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2601 + n * (12 ±0)`
		//  Estimated: `25899 + n * (85 ±6)`
		// Minimum execution time: 103_187_000 picoseconds.
		Weight::from_parts(450_638_048, 25899)
			// Standard Error: 117_984
			.saturating_add(Weight::from_parts(1_491_787, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(26_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
			.saturating_add(Weight::from_parts(0, 85).saturating_mul(n.into()))
	}

	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:1 w:1)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalRegisteredNodes` (r:1 w:1)
	/// Proof: `NodeManager::TotalRegisteredNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::OwnedNodes` (r:0 w:1)
	/// Proof: `NodeManager::OwnedNodes` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn signed_register_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `214`
		//  Estimated: `3577`
		// Minimum execution time: 102_866_000 picoseconds.
		Weight::from_parts(112_274_000, 3577)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::OwnedNodes` (r:64 w:64)
	/// Proof: `NodeManager::OwnedNodes` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalRegisteredNodes` (r:1 w:1)
	/// Proof: `NodeManager::TotalRegisteredNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:0 w:64)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 64]`.
	fn deregister_nodes(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `349 + b * (54 ±0)`
		//  Estimated: `1517 + b * (2571 ±0)`
		// Minimum execution time: 23_109_000 picoseconds.
		Weight::from_parts(25_884_000, 1517)
			// Standard Error: 79_418
			.saturating_add(Weight::from_parts(13_605_065, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2571).saturating_mul(b.into()))
	}
	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::OwnedNodes` (r:64 w:64)
	/// Proof: `NodeManager::OwnedNodes` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalRegisteredNodes` (r:1 w:1)
	/// Proof: `NodeManager::TotalRegisteredNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:0 w:64)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 64]`.
	fn signed_deregister_nodes(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `349 + b * (54 ±0)`
		//  Estimated: `1517 + b * (2571 ±0)`
		// Minimum execution time: 106_063_000 picoseconds.
		Weight::from_parts(112_673_494, 1517)
			// Standard Error: 156_464
			.saturating_add(Weight::from_parts(14_673_199, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2571).saturating_mul(b.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:1 w:1)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalRegisteredNodes` (r:1 w:1)
	/// Proof: `NodeManager::TotalRegisteredNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::OwnedNodes` (r:0 w:1)
	/// Proof: `NodeManager::OwnedNodes` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn register_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `214`
		//  Estimated: `3577`
		// Minimum execution time: 22_785_000 picoseconds.
		Weight::from_parts(24_024_000, 3577)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:1)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_admin_config_registrar() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `211`
		//  Estimated: `1517`
		// Minimum execution time: 12_524_000 picoseconds.
		Weight::from_parts(13_257_000, 1517)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::HeartbeatPeriod` (r:1 w:0)
	/// Proof: `NodeManager::HeartbeatPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:1)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn set_admin_config_reward_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `192`
		//  Estimated: `1505`
		// Minimum execution time: 16_220_000 picoseconds.
		Weight::from_parts(16_974_000, 1505)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::MaxBatchSize` (r:1 w:1)
	/// Proof: `NodeManager::MaxBatchSize` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_admin_config_reward_batch_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `1489`
		// Minimum execution time: 12_975_000 picoseconds.
		Weight::from_parts(13_416_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:0)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::HeartbeatPeriod` (r:1 w:1)
	/// Proof: `NodeManager::HeartbeatPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_admin_config_reward_heartbeat() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `192`
		//  Estimated: `1505`
		// Minimum execution time: 14_659_000 picoseconds.
		Weight::from_parts(16_309_000, 1505)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::RewardAmount` (r:1 w:1)
	/// Proof: `NodeManager::RewardAmount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_admin_config_reward_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `162`
		//  Estimated: `1501`
		// Minimum execution time: 13_051_000 picoseconds.
		Weight::from_parts(14_290_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::RewardEnabled` (r:1 w:1)
	/// Proof: `NodeManager::RewardEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_admin_config_reward_enabled() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `1486`
		// Minimum execution time: 12_508_000 picoseconds.
		Weight::from_parts(13_226_000, 1486)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::MinUptimeThreshold` (r:1 w:1)
	/// Proof: `NodeManager::MinUptimeThreshold` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_admin_config_min_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `1489`
		// Minimum execution time: 11_375_000 picoseconds.
		Weight::from_parts(11_953_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `NodeManager::RewardEnabled` (r:1 w:0)
	/// Proof: `NodeManager::RewardEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:1)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::HeartbeatPeriod` (r:1 w:0)
	/// Proof: `NodeManager::HeartbeatPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::MinUptimeThreshold` (r:1 w:0)
	/// Proof: `NodeManager::MinUptimeThreshold` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardAmount` (r:1 w:0)
	/// Proof: `NodeManager::RewardAmount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalUptime` (r:1 w:0)
	/// Proof: `NodeManager::TotalUptime` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPot` (r:0 w:1)
	/// Proof: `NodeManager::RewardPot` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn on_initialise_with_new_reward_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `215`
		//  Estimated: `3497`
		// Minimum execution time: 23_376_000 picoseconds.
		Weight::from_parts(26_125_000, 3497)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NodeManager::RewardEnabled` (r:1 w:0)
	/// Proof: `NodeManager::RewardEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:0)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn on_initialise_no_reward_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `1505`
		// Minimum execution time: 7_827_000 picoseconds.
		Weight::from_parts(11_273_000, 1505)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `NodeManager::NodeRegistry` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:0)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeUptime` (r:1 w:1)
	/// Proof: `NodeManager::NodeUptime` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::HeartbeatPeriod` (r:1 w:0)
	/// Proof: `NodeManager::HeartbeatPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalUptime` (r:1 w:1)
	/// Proof: `NodeManager::TotalUptime` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn offchain_submit_heartbeat() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `507`
		//  Estimated: `3577`
		// Minimum execution time: 30_170_000 picoseconds.
		Weight::from_parts(36_630_000, 3577)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NodeManager::OldestUnpaidRewardPeriodIndex` (r:1 w:0)
	/// Proof: `NodeManager::OldestUnpaidRewardPeriodIndex` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:0)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalUptime` (r:1 w:0)
	/// Proof: `NodeManager::TotalUptime` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeUptime` (r:1001 w:999)
	/// Proof: `NodeManager::NodeUptime` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPot` (r:1 w:0)
	/// Proof: `NodeManager::RewardPot` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::LastPaidPointer` (r:1 w:1)
	/// Proof: `NodeManager::LastPaidPointer` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::MaxBatchSize` (r:1 w:0)
	/// Proof: `NodeManager::MaxBatchSize` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:999 w:0)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 1000]`.
	fn offchain_pay_nodes(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2334 + b * (184 ±0)`
		//  Estimated: `6196 + b * (2587 ±0)`
		// Minimum execution time: 147_805_000 picoseconds.
		Weight::from_parts(988_169_849, 6196)
			// Standard Error: 232_533
			.saturating_add(Weight::from_parts(46_177_465, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2587).saturating_mul(b.into()))
	}
	/// Storage: `NodeManager::OldestUnpaidRewardPeriodIndex` (r:1 w:0)
	/// Proof: `NodeManager::OldestUnpaidRewardPeriodIndex` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPeriod` (r:1 w:0)
	/// Proof: `NodeManager::RewardPeriod` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalUptime` (r:1 w:0)
	/// Proof: `NodeManager::TotalUptime` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeUptime` (r:12 w:10)
	/// Proof: `NodeManager::NodeUptime` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::RewardPot` (r:1 w:0)
	/// Proof: `NodeManager::RewardPot` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::LastPaidPointer` (r:1 w:1)
	/// Proof: `NodeManager::LastPaidPointer` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::MaxBatchSize` (r:1 w:0)
	/// Proof: `NodeManager::MaxBatchSize` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:10 w:0)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 100]`.
	fn pay_nodes_constant_batch_size(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2601 + n * (12 ±0)`
		//  Estimated: `25899 + n * (85 ±6)`
		// Minimum execution time: 103_187_000 picoseconds.
		Weight::from_parts(450_638_048, 25899)
			// Standard Error: 117_984
			.saturating_add(Weight::from_parts(1_491_787, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(26_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
			.saturating_add(Weight::from_parts(0, 85).saturating_mul(n.into()))
	}

	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:1 w:1)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalRegisteredNodes` (r:1 w:1)
	/// Proof: `NodeManager::TotalRegisteredNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::OwnedNodes` (r:0 w:1)
	/// Proof: `NodeManager::OwnedNodes` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn signed_register_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `214`
		//  Estimated: `3577`
		// Minimum execution time: 102_866_000 picoseconds.
		Weight::from_parts(112_274_000, 3577)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::OwnedNodes` (r:64 w:64)
	/// Proof: `NodeManager::OwnedNodes` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalRegisteredNodes` (r:1 w:1)
	/// Proof: `NodeManager::TotalRegisteredNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:0 w:64)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 64]`.
	fn deregister_nodes(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `349 + b * (54 ±0)`
		//  Estimated: `1517 + b * (2571 ±0)`
		// Minimum execution time: 23_109_000 picoseconds.
		Weight::from_parts(25_884_000, 1517)
			// Standard Error: 79_418
			.saturating_add(Weight::from_parts(13_605_065, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2571).saturating_mul(b.into()))
	}
	/// Storage: `NodeManager::NodeRegistrar` (r:1 w:0)
	/// Proof: `NodeManager::NodeRegistrar` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::OwnedNodes` (r:64 w:64)
	/// Proof: `NodeManager::OwnedNodes` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::TotalRegisteredNodes` (r:1 w:1)
	/// Proof: `NodeManager::TotalRegisteredNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NodeManager::NodeRegistry` (r:0 w:64)
	/// Proof: `NodeManager::NodeRegistry` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 64]`.
	fn signed_deregister_nodes(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `349 + b * (54 ±0)`
		//  Estimated: `1517 + b * (2571 ±0)`
		// Minimum execution time: 106_063_000 picoseconds.
		Weight::from_parts(112_673_494, 1517)
			// Standard Error: 156_464
			.saturating_add(Weight::from_parts(14_673_199, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2571).saturating_mul(b.into()))
	}
}